// Fcs.cpp: implementation of the CFcs class.
//
//////////////////////////////////////////////////////////////////////

#include "stdafx.h"
#include "sexshop.h"
#include "Fcs.h"

#ifdef _DEBUG
#undef THIS_FILE
static char THIS_FILE[]=__FILE__;
#define new DEBUG_NEW
#endif

//////////////////////////////////////////////////////////////////////
// Construction/Destruction
//////////////////////////////////////////////////////////////////////

CFcs::CFcs()
{

}

CFcs::~CFcs()
{

}

USHORT CFcs::Calc16 (UCHAR *buff, USHORT len)
{
	const int mtab []={
	0x0000,0xc1c0,0x81c1,0x4001,0x01c3,0xc003,0x8002,0x41c2,
	0x01c6,0xc006,0x8007,0x41c7,0x0005,0xc1c5,0x81c4,0x4004,
	0x01cc,0xc00c,0x800d,0x41cd,0x000f,0xc1cf,0x81ce,0x400e,
	0x000a,0xc1ca,0x81cb,0x400b,0x01c9,0xc009,0x8008,0x41c8,
	0x01d8,0xc018,0x8019,0x41d9,0x001b,0xc1db,0x81da,0x401a,
	0x001e,0xc1de,0x81df,0x401f,0x01dd,0xc01d,0x801c,0x41dc,
	0x0014,0xc1d4,0x81d5,0x4015,0x01d7,0xc017,0x8016,0x41d6,
	0x01d2,0xc012,0x8013,0x41d3,0x0011,0xc1d1,0x81d0,0x4010,
	0x01f0,0xc030,0x8031,0x41f1,0x0033,0xc1f3,0x81f2,0x4032,
	0x0036,0xc1f6,0x81f7,0x4037,0x01f5,0xc035,0x8034,0x41f4,
	0x003c,0xc1fc,0x81fd,0x403d,0x01ff,0xc03f,0x803e,0x41fe,
	0x01fa,0xc03a,0x803b,0x41fb,0x0039,0xc1f9,0x81f8,0x4038,
	0x0028,0xc1e8,0x81e9,0x4029,0x01eb,0xc02b,0x802a,0x41ea,
	0x01ee,0xc02e,0x802f,0x41ef,0x002d,0xc1ed,0x81ec,0x402c,
	0x01e4,0xc024,0x8025,0x41e5,0x0027,0xc1e7,0x81e6,0x4026,
	0x0022,0xc1e2,0x81e3,0x4023,0x01e1,0xc021,0x8020,0x41e0,
	0x01a0,0xc060,0x8061,0x41a1,0x0063,0xc1a3,0x81a2,0x4062,
	0x0066,0xc1a6,0x81a7,0x4067,0x01a5,0xc065,0x8064,0x41a4,
	0x006c,0xc1ac,0x81ad,0x406d,0x01af,0xc06f,0x806e,0x41ae,
	0x01aa,0xc06a,0x806b,0x41ab,0x0069,0xc1a9,0x81a8,0x4068,
	0x0078,0xc1b8,0x81b9,0x4079,0x01bb,0xc07b,0x807a,0x41ba,
	0x01be,0xc07e,0x807f,0x41bf,0x007d,0xc1bd,0x81bc,0x407c,
	0x01b4,0xc074,0x8075,0x41b5,0x0077,0xc1b7,0x81b6,0x4076,
	0x0072,0xc1b2,0x81b3,0x4073,0x01b1,0xc071,0x8070,0x41b0,
	0x0050,0xc190,0x8191,0x4051,0x0193,0xc053,0x8052,0x4192,
	0x0196,0xc056,0x8057,0x4197,0x0055,0xc195,0x8194,0x4054,
	0x019c,0xc05c,0x805d,0x419d,0x005f,0xc19f,0x819e,0x405e,
	0x005a,0xc19a,0x819b,0x405b,0x0199,0xc059,0x8058,0x4198,
	0x0188,0xc048,0x8049,0x4189,0x004b,0xc18b,0x818a,0x404a,
	0x004e,0xc18e,0x818f,0x404f,0x018d,0xc04d,0x804c,0x418c,
	0x0044,0xc184,0x8185,0x4045,0x0187,0xc047,0x8046,0x4186,
	0x0182,0xc042,0x8043,0x4183,0x0041,0xc181,0x8180,0x4040};


	USHORT fcs=0;
	USHORT q=0;

	fcs=0xffff;	//fcs initialized with all ones

	while (len--)
	{
		q=*(mtab+(*buff++^(fcs>>8)));
		fcs=((q&0xff00)^(fcs<<8))|(q&0x00ff);
	}
	return (fcs^0xffff); // retorna el fcs complementado a 1

}

USHORT CFcs::Calc8 (UCHAR *buff, USHORT len)
{
	static const UCHAR mtab[] = {
		0x00, 0x07, 0x0e, 0x09, 0x1c, 0x1b, 0x12, 0x15,
		0x38, 0x3f, 0x36, 0x31, 0x24, 0x23, 0x2a, 0x2d,
		0x70, 0x77, 0x7e, 0x79, 0x6c, 0x6b, 0x62, 0x65,
		0x48, 0x4f, 0x46, 0x41, 0x54, 0x53, 0x5a, 0x5d,
		0xe0, 0xe7, 0xee, 0xe9, 0xfc, 0xfb, 0xf2, 0xf5,
		0xd8, 0xdf, 0xd6, 0xd1, 0xc4, 0xc3, 0xca, 0xcd,
		0x90, 0x97, 0x9e, 0x99, 0x8c, 0x8b, 0x82, 0x85,
		0xa8, 0xaf, 0xa6, 0xa1, 0xb4, 0xb3, 0xba, 0xbd,
		0xc7, 0xc0, 0xc9, 0xce, 0xdb, 0xdc, 0xd5, 0xd2,
		0xff, 0xf8, 0xf1, 0xf6, 0xe3, 0xe4, 0xed, 0xea,
		0xb7, 0xb0, 0xb9, 0xbe, 0xab, 0xac, 0xa5, 0xa2,
		0x8f, 0x88, 0x81, 0x86, 0x93, 0x94, 0x9d, 0x9a,
		0x27, 0x20, 0x29, 0x2e, 0x3b, 0x3c, 0x35, 0x32,
		0x1f, 0x18, 0x11, 0x16, 0x03, 0x04, 0x0d, 0x0a,
		0x57, 0x50, 0x59, 0x5e, 0x4b, 0x4c, 0x45, 0x42,
		0x6f, 0x68, 0x61, 0x66, 0x73, 0x74, 0x7d, 0x7a,
		0x89, 0x8e, 0x87, 0x80, 0x95, 0x92, 0x9b, 0x9c,
		0xb1, 0xb6, 0xbf, 0xb8, 0xad, 0xaa, 0xa3, 0xa4,
		0xf9, 0xfe, 0xf7, 0xf0, 0xe5, 0xe2, 0xeb, 0xec,
		0xc1, 0xc6, 0xcf, 0xc8, 0xdd, 0xda, 0xd3, 0xd4,
		0x69, 0x6e, 0x67, 0x60, 0x75, 0x72, 0x7b, 0x7c,
		0x51, 0x56, 0x5f, 0x58, 0x4d, 0x4a, 0x43, 0x44,
		0x19, 0x1e, 0x17, 0x10, 0x05, 0x02, 0x0b, 0x0c,
		0x21, 0x26, 0x2f, 0x28, 0x3d, 0x3a, 0x33, 0x34,
		0x4e, 0x49, 0x40, 0x47, 0x52, 0x55, 0x5c, 0x5b,
		0x76, 0x71, 0x78, 0x7f, 0x6a, 0x6d, 0x64, 0x63,
		0x3e, 0x39, 0x30, 0x37, 0x22, 0x25, 0x2c, 0x2b,
		0x06, 0x01, 0x08, 0x0f, 0x1a, 0x1d, 0x14, 0x13,
		0xae, 0xa9, 0xa0, 0xa7, 0xb2, 0xb5, 0xbc, 0xbb,
		0x96, 0x91, 0x98, 0x9f, 0x8a, 0x8d, 0x84, 0x83,
		0xde, 0xd9, 0xd0, 0xd7, 0xc2, 0xc5, 0xcc, 0xcb,
		0xe6, 0xe1, 0xe8, 0xef, 0xfa, 0xfd, 0xf4, 0xf3
	};

	UCHAR crc=0;
	UCHAR i;


	for(i=0; i<len; i++)
		crc = mtab[crc ^ buff[i]];

	return crc;

}